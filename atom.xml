<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xpangz</title>
  <icon>https://www.gravatar.com/avatar/8d928c8112e19e9e78f6e5608eab0ac4</icon>
  <subtitle>爱读书 爱锻炼 爱音乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Xpangz.github.io/"/>
  <updated>2019-11-18T15:41:10.602Z</updated>
  <id>http://Xpangz.github.io/</id>
  
  <author>
    <name>小胖子</name>
    <email>942683460@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Batch normalization学习</title>
    <link href="http://Xpangz.github.io/2019/11/18/Batch%20normalization%E5%AD%A6%E4%B9%A0/"/>
    <id>http://Xpangz.github.io/2019/11/18/Batch normalization学习/</id>
    <published>2019-11-18T15:35:00.000Z</published>
    <updated>2019-11-18T15:41:10.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ol><li><a href="https://arxiv.org/pdf/1502.03167v3.pdf" target="_blank" rel="noopener">Batch Normalization: Accelerating Deep Network Training b y Reducing Internal Covariate Shift</a> </li><li><a href="https://blog.csdn.net/qq_42823043/article/details/89765194" target="_blank" rel="noopener">Batch Normalization（笔记整理）</a></li><li><a href="https://www.jianshu.com/p/86530a0a3935" target="_blank" rel="noopener">Batch normalization理解</a></li><li><a href="https://www.jianshu.com/p/a9a4ddc2fcc4" target="_blank" rel="noopener">关于BatchNormalization的讨论</a></li><li><a href="https://www.zhihu.com/question/38102762" target="_blank" rel="noopener">深度学习中 Batch Normalization为什么效果好？</a></li><li><a href="https://zhuanlan.zhihu.com/p/34879333" target="_blank" rel="noopener">Batch Normalization原理与实战</a></li></ol><h3 id="为什么有Batch-Normalization？"><a href="#为什么有Batch-Normalization？" class="headerlink" title="为什么有Batch Normalization？"></a>为什么有Batch Normalization？</h3><a id="more"></a><p><strong>数据分布不稳定，为了解决internal  covariate shift(在训练过程中深度网络内部隐层分布的不一致)。</strong><br>机器学习领域的假设——独立同分布，即假设训练数据和测试数据是满足相同分布的，希望通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障(不是必然要求，但可以简化常规机器学习模型的训练，提升机器学习模型的预测能力)。<br>而深度神经网络中，深度神经网络涉及到很多层的叠加，而每一层的参数更新会导致上层的输入数据分布发生变化，通过层层叠加，高层的输入分布变化会非常剧烈，这就使得高层需要不断去重新适应底层的参数更新。为了训好模型，我们需要非常谨慎地去设定学习率、初始化权重、以及尽可能细致的参数更新策略。 网络的训练，需要去学习适应不同的数据分布，明显造成的后果就是收敛慢，效果不佳。</p><p>在数据预处理中进行“白化”操作(LeCun et al.,1998b；Wiesler&amp;Ney,2011)，一个是去除特征之间的相关性，也即保持数据的独立性，另一个是使得所有特征具有相同的均值和方差，也即保持数据的同分布。最典型的方法是PCA。但白化主要有以下问题： 白化过程计算成本太高，并且在每一轮训练中的每一层我们都需要做如此高成本计算的白化操作；白化过程由于改变了网络每一层的分布，因而改变了网络层中本身数据的表达能力。底层网络学习到的参数信息会被白化操作丢失掉。 </p><p><strong>梯度弥散，减缓网络收敛速度</strong><br>随着模型训练的进行，输入的变化可能整体趋向于变大或变小，导致BP时梯度爆炸或梯度消失，容易陷入饱和区域</p><p><strong>参数调整</strong><br>网络前面的参数变更会随着网络深度，增大对后面数据输入的影响，因此每层的参数更新策略需要尽可能的谨慎。 </p><h3 id="用在哪？"><a href="#用在哪？" class="headerlink" title="用在哪？"></a>用在哪？</h3><p>在网络的每一层输入之前，做一个归一化处理，即$bn(wu+b)$，然后再接激活函数。(来源3)<br>可以应用于网络中任意的 activation set？？(来源5—— 魏秀参 )<br>在多层CNN里，BN放在卷积层之后，激活和池化之前，以LeNet5为例 。(来源2)<img src="https://img-blog.csdnimg.cn/20190502223631165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODIzMDQz,size_16,color_FFFFFF,t_70" alt></p><h3 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h3><p>在神经网络训练时遇到收敛速度很慢，或梯度爆炸等无法训练的状况时可以尝试BN来解决。在一般使用情况下也可以加入BN来加快训练速度，提高模型精度。（来源5—— 魏秀参） </p><h3 id="作用是什么？"><a href="#作用是什么？" class="headerlink" title="作用是什么？"></a>作用是什么？</h3><ol><li><p>防止梯度弥散,缓解梯度饱和。<br>一种方法是采用非饱和性激活函数如ReLU,而另一种方法针对sigmoid和tanh激活函数，他们存在饱和区域(即越接近两边，梯度会接近0)，</p><blockquote><p>具体以sigmoid为例， z = g(wu+b)，其中u为输入层，w和b为权重矩阵和偏移向量（即网络层里需要学习的参数）<br>$$ g(x) = \dfrac{1}{1+e^{-x}} $$</p><p>$Sigmoid’=sigmoid*(1-sigmoid)$ 。随着|x|的增加，g’(x)会趋向于0，这意味着，在所有维数上，除了那些绝对值较小的 x=wu+b ，下降到 u 的梯度将消失，模型将缓慢训练。<br>而x受W,b和前面所有层参数的影响。</p></blockquote></li><li><p>使每一层神经网络的输入保持相同分布。 <strong>IID独立同分布假设</strong>，就是假设训练数据和测试数据是满足相同分布的，这是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。 </p></li></ol><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><p>1.没有它之前，需要小心的调整学习率和权重初始化，但是有了BN可以放心的使用大学习率；<br>2.极大提升了训练速度，收敛过程大大加快<br>3.减轻了对参数初始化的依赖<br>4.Batch Normalization本身上也是一种正则的方式，一定程度上增加了泛化能力，可以代替其他正则方式如Dropout等。</p><h3 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h3><p>1.当batch尺寸很小时，计算的均值和方差不稳定。不适应于当训练资源有限而无法应用较大的batch的场景。<br>2.动态的神经网络，如rnn中没效果。<br>3.训练数据集和测试数据集方差比较大的时候。(来源4)</p><h3 id="为什么有效："><a href="#为什么有效：" class="headerlink" title="为什么有效："></a>为什么有效：</h3><p>(1) 主流观点，Batch Normalization调整了数据的分布，不考虑激活函数，它让每一层的输出归一化到了均值为0方差为1的分布，这保证了梯度的有效性，目前大部分资料都这样解释，比如BN的原始论文认为的缓解了Internal Covariate Shift(ICS)问题。</p><p>(2) 可以使用更大的学习率，文[2]指出BN有效是因为用上BN层之后可以使用更大的学习率，从而跳出不好的局部极值，增强泛化能力，在它们的研究中做了大量的实验来验证。</p><p>(3) 损失平面平滑。文[3]的研究提出，BN有效的根本原因不在于调整了分布，因为即使是在BN层后模拟ICS，也仍然可以取得好的结果。它们指出，BN有效的根本原因是平滑了损失平面。之前我们说过，Z-score标准化对于包括孤立点的分布可以进行更平滑的调整。<a href="https://arxiv.org/pdf/1805.11604.pdf" target="_blank" rel="noopener">[1805.11604]How Does Batch Normalization Help Optimization</a>认为BN与ICS无关，并不能减少ICS。<br>（来源5—— 言有三-龙鹏 ）</p><h3 id="CNN中的BN如何操作"><a href="#CNN中的BN如何操作" class="headerlink" title="CNN中的BN如何操作"></a>CNN中的BN如何操作</h3><p>(来源4)</p><blockquote><p>我们知道，常规的CNN一般由卷积层、下采样层及全连接层构成。全连接层形式上与前向神经网络是一样的，所以可以采取前向神经网络中的BatchNorm方式，而下采样层本身不带参数所以可以忽略，所以CNN中主要关注卷积层如何计算BatchNorm。</p><p>CNN中的某个卷积层由m个卷积核构成，每个卷积核对三维的输入（<strong>通道数*长*宽</strong>）进行计算，激活及输出值是个二维平面（<strong>长*宽</strong>），对应一个输出通道（参考下面第一幅图），由于存在<strong>m</strong>个卷积核，所以输出仍然是三维的，由<strong>m</strong>个通道及每个通道的二维平面构成。</p></blockquote><p><img src="/images/BN_pic5.png" alt="图7：CNN中的卷积核"></p><p><img src="/images/BN_pic6.png" alt="图8.CNN中的BatchNorm过程"></p><blockquote><p>那么在卷积层中，如果要对通道激活二维平面中某个激活值进行Normalization操作，怎么确定神经元集合S的势力范围呢？第二幅图给出了示意图。类似于前向神经网络中的BatchNorm计算过程，对于Mini-Batch训练方法来说，反向传播更新梯度使用Batch中所有实例的梯度方向来进行。</p><p>​    所以对于CNN某个卷积层对应的输出通道k来说，假设某个Batch包含n个训练实例，那么每个训练实例在这个通道k都会产生一个二维激活平面，也就是说Batch中n个训练实例分别通过同一个卷积核的输出通道k的时候产生了n个激活平面(Feature Map)。假设激活平面长为5，宽为4，则激活平面包含20个激活值，n个不同实例的激活平面共包含20*n个激活值。</p><p>​    那么BatchNorm的集合S的范围就是由这20*n个同一个通道被Batch不同训练实例激发的激活平面中包含的所有激活值构成（对应图8中所有标为蓝色的激活值）。划定集合S的范围后，激活平面中任意一个激活值都需进行Normalization操作，其Normalization的具体计算过程与前文所述计算过程一样，采用公式3即可完成规范化操作。这样即完成CNN卷积层的BatchNorm转换过程。</p></blockquote><p><img src="/images/BN_pic7.png" alt><br>其中，<img src="https://math.jianshu.com/math?formula=a_i" alt="a_i"> 为某个神经元原始激活值，<img src="https://math.jianshu.com/math?formula=a_i%5E%7Bnorm%7D" alt="a_i^{norm}">为经过规范化操作后的规范后值 ,$\mu$自己认为是20*n个激活值的平均值，$\sigma$是4x5xn个统计数据产生，而每个特征图使用一组$\gamma$和$\beta$。</p><blockquote><p>在下图中,假设一个批量有<img src="https://math.jianshu.com/math?formula=m%0A%0A" alt="m">个样本，Feature Map的尺寸是<strong>p</strong>x<strong>q</strong>，通道数是<img src="https://math.jianshu.com/math?formula=d" alt="d">，在卷积网络的中，BN的操作是以Feature Map为单位的，因此一个BN要统计的数据个数为 <strong>m</strong>x<strong>p</strong>x<strong>q</strong>，每个Feature Map使用一组 <img src="https://math.jianshu.com/math?formula=%5Cgamma%20" alt="\gamma ">和<img src="https://math.jianshu.com/math?formula=%5Cbeta%20" alt="\beta ">。<img src="/images/BN_pic8.png" alt="卷积网络的BN示意图"></p></blockquote><h3 id="公式理解："><a href="#公式理解：" class="headerlink" title="公式理解："></a>公式理解：</h3><p>$$ \hat{x}^{k} = \dfrac{x^{(K)}-E[x^{(k)}]}{\sqrt{Var[x^{(k)}]}} $$ 其中$E[x]$为均值，$\sqrt{Var}$为标准差，接下来再$$y^{(k)} = \gamma^{(k)}\hat{x}^{(k)}+\beta^{(k)}$$ $y^{(k)}$就是$bn()$的输出<br>批处理的公式流程如下<br><img src="/images/BN_pic1.png" alt><br>数学上理解，激活函数的输入$x=wu+b$会随着网络加深，逐渐向两端靠拢，两个函数的导数在两侧梯度变化趋于0， 这会导致在Back propagation的时候梯度消失，也就是说收敛越来越慢 。<br><img src="/images/BN_pic2.png" alt><br> $Tanh’=1-tanh^2$</p><p><img src="/images/BN_pic3.png" alt></p><p>可能是前面进行的操作与线性函数效果相同？为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作$(y=scale*x+shift)$，每个神经元增加了两个参数scale和shift参数，通过训练学习得到， 这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。（来源3）<br> 这种表示会对模型的收敛有帮助，但是也可能破坏已经学习到的特征。为了解决这个问题，BN添加了两个可以学习的变量<img src="https://math.jianshu.com/math?formula=%5Cbeta%20" alt="\beta ">和 用于控制网络能够表达直接映射，也就是能够还原BN之前学习到的特征。（来源4）</p><p>整个流程就是<img src="/images/BN_pic4.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考文献：&quot;&gt;&lt;a href=&quot;#参考文献：&quot; class=&quot;headerlink&quot; title=&quot;参考文献：&quot;&gt;&lt;/a&gt;参考文献：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1502.03167v3.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Batch Normalization: Accelerating Deep Network Training b y Reducing Internal Covariate Shift&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_42823043/article/details/89765194&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Batch Normalization（笔记整理）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/86530a0a3935&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Batch normalization理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/a9a4ddc2fcc4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于BatchNormalization的讨论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/38102762&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习中 Batch Normalization为什么效果好？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34879333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Batch Normalization原理与实战&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;为什么有Batch-Normalization？&quot;&gt;&lt;a href=&quot;#为什么有Batch-Normalization？&quot; class=&quot;headerlink&quot; title=&quot;为什么有Batch Normalization？&quot;&gt;&lt;/a&gt;为什么有Batch Normalization？&lt;/h3&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://Xpangz.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>人性的弱点——戴尔.卡耐基（陶曚译）</title>
    <link href="http://Xpangz.github.io/2019/11/05/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9%E2%80%94%E2%80%94%E6%88%B4%E5%B0%94.%E5%8D%A1%E8%80%90%E5%9F%BA%EF%BC%88%E9%99%B6%E6%9B%9A%E8%AF%91%EF%BC%89/"/>
    <id>http://Xpangz.github.io/2019/11/05/人性的弱点——戴尔.卡耐基（陶曚译）/</id>
    <published>2019-11-05T02:52:00.000Z</published>
    <updated>2019-11-05T02:56:55.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="人际关系的基本技巧"><a href="#人际关系的基本技巧" class="headerlink" title="人际关系的基本技巧"></a><strong>人际关系的基本技巧</strong></h3><p>[ <font color="#DEB887" size="4" face="楷体">不要批评，不要指责，不要抱怨</font> ]</p><ul><li>“三十年前。我就懂得抱怨是愚蠢的行为。克服自己的种种缺点就已经够我忙的了，哪还有精力去抱怨上帝为何不把天赋平分给每个人”。</li><li>批评是无用的，它激起抵触，让人急于辩白；批评是危险的，它伤害自尊，甚至让人萌生恨意。</li><li>指责如同回旋镖，总会伤及自身。</li><li>“你们不要论断人，免得被人论断”。（林肯）</li><li>【如果寄出这封信，我固然发泄了自己的感受，但米德一定会辩白，甚至反而质疑我。这样不仅会引发不愉快，损害他作为指挥官的威信，甚至有可能逼得他无路可退，愤而辞职】</li><li>改变自己远比改变他人令你收益更多，并且风险更小。孔子曾言：“苟正其身矣，于从政乎何有？不能正其身，如正人何？”。</li><li>人并非理性生物。他们由情感驱使，被偏见支配，傲慢与虚荣是他们的动力之源。</li><li>批评、指责和抱怨是蠢材与生俱来的“才能”；理解和宽容却是对人品和自律的极大考验。</li><li>“伟人的伟大之处，从他对待小人物的态度中可见一斑”。（卡莱尔）</li><li>尝试以理解代替指责，设身处地去想一想对方为何如此——这比简单的批评要有益得多，也有趣得多。</li></ul><a id="more"></a><p>[ <font color="#DEB887" size="4" face="楷体">真心实意地感谢他人、赞美他人</font> ]</p><ul><li>让他人为你效劳的方法——让对方心甘情愿地自发去做。</li><li>若想请你为我做事，唯一的方法就是给你想要的。</li><li>人性中最深层的动力是“对重视的渴求”。</li><li>如果你愿意告诉我什么事情最让你有满足感，我就能知道你是怎样的人。</li><li>为了博得同情和关注，人们有时会假装弱小，从而获得存在感。</li><li>“我的能力在于激发周围人的热情，我拥有的最大资本，是赞赏和鼓励，我以此方式激发人们的潜能。没有什么比上司的批评更打击一个人的积极性了。我从未批评过任何人。我认为给人们正面激励对工作至关重要，所以我喜欢鼓励他人，不愿意吹毛求疵。如果我看到任何闪光点，我会由衷地赞许，不吝啬赞美之词”。</li><li>我们总是对伴侣的付出习以为常，却忘记了他们也需要被称赞、被感激。</li><li>人人都知道如果连续六天不让家人或雇员进食就等同于犯罪，却连续六天、六周、甚至六十年地吝啬他们真诚称赞，他们忽略了这一点——人们像渴求食物一样渴求被认同。</li><li>除了对自尊的滋养，我别无他求。</li><li>真挚的赞美能够改变人的一生。</li><li>阿谀奉承当然注定失败。明辨是非的人一眼就能看穿其肤浅与虚伪。当然，也有些人恰恰相反，对赞美的渴求往往会令其不辨真假照单全收，正如久饿之人会饥不择食一样。</li><li>长远来看，谄媚对人际关系的危害远大于一时的成效。虚情假意的奉承话如同伪钞，一经使用，定会惹祸上身。</li><li>赞美和奉承，前者真诚，后者虚伪；前者无私，后者自私；前者发自肺腑，后者流于表面；前者为世人所歌颂，后者为世人所不齿。</li><li>普天之下的每一颗心，都会因他人的赞许而欢愉。</li><li>伤害人们感情的做法不值得提倡，也不会令对方有任何改变。</li><li>此生之路，我将走过；走过这一次，便再也无法重来。所有力所能及的善行，所有充盈于心的善意，我将毫不吝惜，即刻倾予。我将再不拖延，再不淡漠，只因此生之路，再也无法重来。</li><li>我遇见的每个人都必定在某一方面优胜于我。正因如此，我向每个人学习。（爱默生）他们的学习之处也即赞美之处。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">激发他人的需求</font> ]</p><ul><li>所以普天之下唯一能够影响他人的方式，就是找出他们想要什么，并且交给他们如何获得。</li><li>行为根植于人类的根本欲望，无论在商界、政界、还是家庭或学校，说服别人的首要途经，是引发对方的强烈欲求。</li><li>想要影响他人，唯一的方法是以对方的需求为出发点。</li><li>在开口之前，先问问自己：“怎样才能让对方主动自发地去做这件事？”。</li><li>“洞悉他人的立场，并能够同时兼顾自己和他人的立场。”</li><li>了解对方的需求，从而激发对方的兴趣，并不等同于操纵他人、损人利己。沟通的宗旨是双赢。</li><li>表现自我是人性的重要需求。</li></ul><h3 id="赢得他人喜爱的六个方式"><a href="#赢得他人喜爱的六个方式" class="headerlink" title="赢得他人喜爱的六个方式"></a><strong>赢得他人喜爱的六个方式</strong></h3><p>[ <font color="#DEB887" size="4" face="楷体">广受欢迎的奥秘</font> ]</p><ul><li>发自内心地关注他人，不出两个月，你就能交到许多朋友；只想博得他人的关注，哪怕两年，你也交不到朋友。</li><li>人们真正关心的只有自己，这一点永远不会变，无论今天还是明天，无论现在还是未来。</li><li>漠视同胞之人，生活最为艰辛，给周遭带来的伤害也最为深痛。置身于这样的个体周围，人类命运有如堕入寒冬，生机难复。</li><li>要想得到友谊，就别怕麻烦，全心全意地为他人做些事情吧——哪怕要为此付出时间、精力、慷慨与体贴。</li><li>“我们对他人的兴趣，以他人对我们的兴趣为前提”。</li><li>双方的兴趣，皆以“真”为前提。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">微笑</font> ]</p><ul><li>人们只有真心热爱自己在做的事，才有可能成功。</li><li>“人们往往认为感觉先于行为，但实际上，感觉与行为是同步的。相较于情绪，个人意志对行为的影响更为直接，只要调整行为，我们就能够间接地调整情绪。”</li><li>“事无优劣，思想使然。”（莎士比亚）</li><li>“人们的幸福感取决于他们的心境。”（林肯）</li><li>“走出家门的时候，请收紧下颔，高昂起头，让空气充满肺腑，让阳光沐浴身心。向朋友问好时记得微笑，握手的时候请真心诚意。不要害怕误解，也不要在敌人身上浪费一分一秒。        请在脑海中牢牢记住你的心愿，径直向目的地前进。专注于你的伟大前程，你就会发现在日升月落之间，你已经不知不觉地抓住了每一次接近目标的机会，如同小小的珊瑚虫从澎湃海浪中汲取它需要的养分。请在脑海中仔细勾勒理想的形象，笃定的想法将帮助你一步步成长为那个美好真诚、才华横溢的自己。思想是至高无上的。请端正心态，学会无畏、坦率、乐观，因为正确的思维是创造一切的前提。心想是事成之因，虔诚的祷告者必将得到回应。倘若你心意坚定，你就不会迷失方向。收紧下颔，高昂起头——你将会成为自己的神。”(阿尔伯特.哈伯德)</li><li>它分文不取，却价值连城；它使人富有，亦于己无妨；它发生于瞬息之间，却令人永难忘怀；它使贫者丰足，令富者匮乏；它为家庭带来欢愉，为事业营造机遇，为友谊立下盟约；它是疲倦者的休憩，是忧虑者的良方，是绝望者的黎明，是哀戚者的阳光；它无法用金钱交换，无法经乞求而得，无法借与他人，也无法被人窃取；只有在给予之时，它才有存在的价值。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">无论对于何人，无论以何种语言，自己的名字都是世界上最甜蜜最重要的词汇</font> ]</p><ul><li>人们对自己名字的在意程度，远胜于地球上其它所有名字的总和。能够熟稔地叫出对方姓名本身已是有效而不着痕迹的赞美。</li><li>每个人都希望自己的名字永垂不朽，为此付出任何代价都在所不惜。</li><li>好的习惯建立在日复一日的琐碎牺牲之上。</li><li>通过记住对方名字让对方感到被重视。</li><li>每个姓名都独立而完整地归属于特定的个体，而非其它任何人。名字令我们与众不同，成为独一无二的自己。沟通中一旦道出对方姓名，我们所传递的信息或是请求就增添了一层特别的色彩。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">专注地倾听，鼓励他人谈论自己</font> ]</p><ul><li>她对我的旅行经历并不感兴趣，真正令她兴趣盎然并自我感觉良好的，是有人愿意倾听她的经历。</li><li>专注的倾听是我们能够给予他人的最高赞许。</li><li>关注是最含蓄的谄谀。极少有人对他人一心一意的关注无动于衷。</li><li>商务往来并无制胜之道可言，然而在对方说话的时候专注地倾听，是令对方解除戒备的最佳方式。</li><li>人们请医生有时只是需要一个听众而已。</li><li>假如你立志要能言善辩，请先学会专注聆听。做一个有趣的人，并对他人感兴趣。问对方乐于回答的问题，鼓励他们谈论自己的经历。</li><li>请记住，你的谈话对象并不关心你和你的问题，而对他们自己、他们的欲望和烦恼要感兴趣得多。他的牙疼远比异国饿殍遍地的饥荒更重要，他脖子上的疖子也远比非洲的四十次地震更让人心烦。所以下次开口之前，请先想想这点。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">谈论对方感兴趣的事情</font> ]</p><ul><li>谈论对方最在乎的事情，是直抵对方内心深处的捷径。</li><li>“我知道，如果不是一开始就找到了对方感兴趣的话题，借此拉近距离，他不会如此平易近人。”</li><li>谈论对方的兴趣能够带来双赢。</li></ul><p>[ <font color="#DEB887" size="4" face="楷体">真心实意地让对方知道他有多重要</font> ]</p><ul><li>我想从他那儿得到什么！！！我想从他那得到什么！！！<br>如果人人都如此自私阴暗，付出一点小小的善意和一句真诚的称赞都所求回报；如果我们的灵魂渺小如尘沙，那么失败是注定应得的惩罚。<br>我对邮局的那个小伙子别无他求，只想要一个无价之宝，我也确实得到了——我得到了付出而不求回报的美好感受。</li><li>令他人感到重要！</li><li>“无论何时，你们愿意人怎样对待你们，你们也要怎样对待人”（耶稣）</li><li>由衷地赞许，从不吝啬赞美之词，使人听到真诚的鼓励，而不是廉价虚伪的奉承话。</li><li>“抱歉给您添麻烦了……”“劳驾您……”“能不能请您……”“您介不介意……”诸如此类的礼貌用语如同乏味生活的润滑剂，也是教养的体现。</li><li>真相是赤裸裸的——每个人心里都认为他在某一方面比你强。走进他们内心得方式，是不动声色地让对方知道，你真心觉得他们很重要。</li><li>每个人都必定在某一方面胜于我，因此我向所有人学习（爱默生）<br>三人行，必有我师焉（孔子）</li><li>和对方谈谈他们自己，对方听上几个小时也不会厌倦。</li></ul><h3 id="如何让他人想你之所想"><a href="#如何让他人想你之所想" class="headerlink" title="如何让他人想你之所想"></a><strong>如何让他人想你之所想</strong></h3><p>[ <font color="#DEB887" size="4" face="楷体">赢得争论的方法只有一个，那就是避免争论</font> ]</p><ul><li><p>为什么一定要分个胜负呢？这样会让他对你有好印象吗？为什么就不能给他留点面子呢？人家又没有问你的意见——他根本不需要你的意见。你又何必一定要和他争？别总是自己往枪口上撞。</p></li><li><p>普天之下，赢得争论的方法只有一个，那就是避免争论。</p></li><li><p>在大多数情况下，争论非但不会令双方和解，反而会火上浇油，令双方更加坚信自己言之有理。</p></li><li><p>争辩、抱怨和反驳或许会带来暂时的胜利，但你永远无法通过这表面上的胜利赢得对方的尊敬。</p></li><li><p>也许你是对的，也许你总能驳倒别人，但是那又有什么意义呢。无论输赢，你都无法改变他人的想法。</p></li><li><p>若以争吵对抗误解，怨恨则无休无止。唯有得体的处事能力、怀柔技巧和同理心才能够化解争执。</p></li><li><p>“有远大志向的人不会把时间浪费在无益的争执上”“因为意气用事毫无意义。你的私事再大也大不过天，所以在个人问题上要懂得让步。有狗拦路的时候，最好给它让道，而不要为了争路而被它反咬一口；若是被咬了，即使你杀了它，你的伤口也不会马上愈合。”</p><center>如何避免分歧升级为争吵</center> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">接受分歧。请记住这句话：“如果两个合作伙伴总是意见一致，那么其中一个人就没有存在的意义。”如果对方提出了你从未想到的观点，请心存感激。不同的意见或许会帮助你避免犯错。</span><br><span class="line">不要纵容直觉反应。面对不利处境，人类的本能使我们下意识地进入戒备模式。这时请格外注意。保持冷静，警锡你的本能反应，一它会使你成为最槽的那个你，而非状态最好的那个你。</span><br><span class="line">控制情绪。观察对方是否易怒，你就能知道他是君子还是小人。先听，后说。给对方说话的机会，听他们把话说完。反驳和争辩只会徒增隔阂。建立沟通的桥梁，不要筑起误解的壁垒。</span><br><span class="line">求同存异。听到对方的看法之后，请先想想你认可的部分。</span><br><span class="line">诚恳。在能够让步的时候让步，在应该认错的时候认错。这会令对方放下戒心，从而减少摩擦。</span><br><span class="line">向对方承诺你会认真考虑他的想法，并且说到做到。对方很有可能是正确的。借这个机会深思熟虑，总好过事后被对方指责“我们告诉过你，可你就是不听”。</span><br><span class="line">真心诚意地感谢对方的重视。对方愿意花时间和你争辩，是因为他和你对同一件事感兴趣。将他们视为真心愿意帮助你的人，也许就能化敌为友。</span><br><span class="line">给双方足够时间找出症结所在，不要急于采取行动。主动建议推迟讨论时间，将所有的细节都考虑清楚。再次交涉之前，请坦诚地问问自己这些关键问题：对方有没有可能是正确的，或是部分正确？他的论点中是否有值得肯定的地方？我的建议能够解决问题，还是只会引发不快？我的行为是会把对方推向对立面，还是拉近我们的关系？我的决策是否让人们更尊重我？我会赢，还是会输？如果我赢了，我会付出什么代价？如果我保持缄默，纷争是否会就此平息？目前的局面对我而言，是否意味着机会？</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;人际关系的基本技巧&quot;&gt;&lt;a href=&quot;#人际关系的基本技巧&quot; class=&quot;headerlink&quot; title=&quot;人际关系的基本技巧&quot;&gt;&lt;/a&gt;&lt;strong&gt;人际关系的基本技巧&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;[ &lt;font color=&quot;#DEB887&quot; size=&quot;4&quot; face=&quot;楷体&quot;&gt;不要批评，不要指责，不要抱怨&lt;/font&gt; ]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“三十年前。我就懂得抱怨是愚蠢的行为。克服自己的种种缺点就已经够我忙的了，哪还有精力去抱怨上帝为何不把天赋平分给每个人”。&lt;/li&gt;
&lt;li&gt;批评是无用的，它激起抵触，让人急于辩白；批评是危险的，它伤害自尊，甚至让人萌生恨意。&lt;/li&gt;
&lt;li&gt;指责如同回旋镖，总会伤及自身。&lt;/li&gt;
&lt;li&gt;“你们不要论断人，免得被人论断”。（林肯）&lt;/li&gt;
&lt;li&gt;【如果寄出这封信，我固然发泄了自己的感受，但米德一定会辩白，甚至反而质疑我。这样不仅会引发不愉快，损害他作为指挥官的威信，甚至有可能逼得他无路可退，愤而辞职】&lt;/li&gt;
&lt;li&gt;改变自己远比改变他人令你收益更多，并且风险更小。孔子曾言：“苟正其身矣，于从政乎何有？不能正其身，如正人何？”。&lt;/li&gt;
&lt;li&gt;人并非理性生物。他们由情感驱使，被偏见支配，傲慢与虚荣是他们的动力之源。&lt;/li&gt;
&lt;li&gt;批评、指责和抱怨是蠢材与生俱来的“才能”；理解和宽容却是对人品和自律的极大考验。&lt;/li&gt;
&lt;li&gt;“伟人的伟大之处，从他对待小人物的态度中可见一斑”。（卡莱尔）&lt;/li&gt;
&lt;li&gt;尝试以理解代替指责，设身处地去想一想对方为何如此——这比简单的批评要有益得多，也有趣得多。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="阅读摘抄感悟" scheme="http://Xpangz.github.io/tags/%E9%98%85%E8%AF%BB%E6%91%98%E6%8A%84%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>浅析Unet论文</title>
    <link href="http://Xpangz.github.io/2019/10/27/%E6%B5%85%E6%9E%90Unet%E7%BD%91%E7%BB%9C/"/>
    <id>http://Xpangz.github.io/2019/10/27/浅析Unet网络/</id>
    <published>2019-10-27T14:00:00.000Z</published>
    <updated>2019-11-18T08:20:58.083Z</updated>
    
    <content type="html"><![CDATA[<p>首先，<a href="http://www.arxiv.org/pdf/1505.04597.pdf" target="_blank" rel="noopener">论文地址</a>。</p><p>特点：</p><a id="more"></a><ul><li>fast</li><li>the expansive path is more or less symmetric to the contracting path, and yields a u-shaped architecture.</li><li>没有任何全连接层，只使用了每层卷积的有效部分。i.e., the segmentation map only contains the pixels, for which the full context is available in the input image.</li><li>The resulting network is applicable to various biomedical segmentation problems.</li></ul><h3 id="相关研究分析："><a href="#相关研究分析：" class="headerlink" title="相关研究分析："></a><strong>相关研究分析：</strong></h3><p>CNN有局限性，在于网络和训练集的大小。自ImageNet之后，更大更深的网络也相继出现。生物医学无法提供数以千计的训练图像。</p><p>A classifier output that takes into account the features form multiple layers,使得 good localization 和good use of context是同时可能的。</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>​     <img src="/images/clip_image001.png" alt="WIput  image  128  128 64 64 2  output  segmentation  map  3x3, ReLU  copy and crop  max pool 2x2  up.conv 2x2  conv IXI  Fig. 1. U-net architecture (example for 32x32 pixels in the lowest resolution). Each blue  box corresponds to 8 multi-channel feature map. The number of channels is denoted  on top of the box. The x-y-size is provided Rt the lower left edge of the box. White  boxes represent copied feature maps. The arrows denote the different operations. ">  </p><p>两条路径，一条contracting path to capture context ,一条expanding path that enable precise localization。 contracting path是经典的CNN网络。<br><img src="/images/Unet_pic4.png" alt><br>最后一层使用1x1 convolution 将64 component feature vector映射到所需类别数量。 总共23个卷积层。</p><p>为了实现分割后输出图的无缝平铺，选择输入tile size的大小很重要(例如以供所有的2x2池化操作都能应用到有x与y均匀大小的层当中)</p><p><strong>无填充卷积unpadded convolutions</strong>：即卷积pad=0,这使得图像进行一次卷积会失去边界（图像一周）像素点。因此在3中对应path的feature连接时需要对contract path进行crop。因此The cropping 是必要的，因为每次卷积操作中边界的pixel有损失。</p><h4 id="如何crop-收缩路径和扩展路径中的对应层通过channel维度连接（concatenation）起来。（与fcn中的不同）"><a href="#如何crop-收缩路径和扩展路径中的对应层通过channel维度连接（concatenation）起来。（与fcn中的不同）" class="headerlink" title="如何crop:收缩路径和扩展路径中的对应层通过channel维度连接（concatenation）起来。（与fcn中的不同）"></a>如何crop:收缩路径和扩展路径中的对应层通过channel维度连接（concatenation）起来。（与fcn中的不同）</h4><p>输出结果应包括localization,每个pixel都要被贴上标签。<br>high resolution features from thr contracting path are combined with the upsampled output.卷积层就能够基于这些combined后的信息学习到更精确的输出。</p><p>在upsampling part 有大量的特征通道，能够 allow the network<br>to propagate context information to higher resolution layers</p><p>通过overlap-tile策略允许任意大的图片进行无缝分割。</p><p>tiling strategy is important to apply the network to large images(since otherwise the resolution would be limited by the GPU memory,???)——缺失边界信息的pixel处理：使用镜像<br><img src="/images/Unet_pic2.png" alt></p><p>对现有训练集使用弹性形变(elastic deformations)进行数据增广，<br>好处：<br>1、通过弹性形变网络能够学到invariance；<br>2、without the need to see these transformations in the annotated image corpus(带注释的图像语料库) 因为形变是组织中最常用的变化，弹性形变能够很有效的模拟这种变化。</p><p>相同类别且很接近的目标分离：提出一种权重损失，使得相互touching的目标之间获得较大的权重(where the separating background labels between touching cells obtain a large weight in the loss function.),强迫网络学习边界信息。<br><img src="/images/Unet_pic3.png" alt></p><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p>输入图像和相应分割图像常被用来训练网络，在Caffe中使用 stochastic gradient descent来实现。</p><p>由于unpadded convolutions，输出图像小于一个恒定边界宽度的输入图像。为了最小化开销和最大限度地使用GPU，我们倾向于large input tiles over a large batch size and hence reduce the batch to a single image.（为了对于一张图片减少批次处理，倾向于很大卷积在大规模的批次上）。</p><p>文章相应地使用high momentum(0.99)以便先前所见到的大量训练样本决定当前优化步骤的更新。<br>使用Momentum为解决学习率小时收敛到极值的速度较慢，而学习率较大时，又容易发生震荡，以及Hessian矩阵病态条件问题，可以理解为惯性， 积攒了历史的梯度 ，使当前梯度小幅影响优化方向，而不是完全决定优化方向。也起到了减小波动的效果。 momentum公式（参数为lambda，越大表示之前梯度对现在方向的影响也越大）：<br>$$<br>v_t = \lambda v_{t-1}+\eta*\nabla_{\theta}J(\theta)\<br>\theta = \theta - v_t<br>$$<br>能量函数是在最终特征图上使用soft-max+交叉熵损失函数。<br>soft-max为$a_k(x)$表示在特征通道k中像素位置的激活，K是标签类别数量，$p_k(x)$是approximated maximum-function,即最大的$a_k(x)$对应的p(x)就接近于1，其余接近于0）：<br>$$<br>p_k(x)=\dfrac{e^{a_{k}(x)}}{\sum^K_{k’=1}e^{a_{k’}(x)}}<br>$$<br>Cross entropy loss function为：<br>$$<br>E = \sum_{x\in \Omega}\omega(x)log(p_{l(x)}(x))<br>$$<br>交叉熵通过在每个位置上$p_{l(x)}(x)$距离1的违背程度进行惩罚，其中$l$是每个像素真正的标签，$\omega$是在训练中给pixels定义重要性所引入的权重。</p><p>预先计算每个真正分割的权重图for each ground truth segmentation,来补偿在训练集中每个特定标签的不同频率？并且强迫网络学习相互接触的细胞之间的分割。</p><p>边界上的计算——morphological operations。权重计算公式：<br><img src="/images/Unet_pic5.png" alt></p><p>一个好的初始权重极其重要，理想地，应调整初始权重，使得网络中的每个特征映射都有近似单位方差。本文从标准方差($\sqrt{\dfrac{2}{N}}$,N=3x3x64=576)的高斯分布中提取初始权值。</p><p>数据增广：主要需要平移和旋转的不变性以及形变和灰度值变化的鲁棒性。训练样本的随机弹性形变似乎是训练一个标注图像很少的分割网络的关键概念。Unet中：我们使用3×3粗网格上的随机位移向量生成平滑形变。位移是从一个10像素标准差的高斯分布中采样的。Per-pixel displacements are then computed using bicubic interpolation.在contracting path最后的Drop-out layers 执行进一步的implicit data augmentation.</p><p>其它价值文献博客：</p><ol><li>The value of data augmentation for learning invariance has been<br>shown in Dosovitskiy et al. [<code>Dosovitskiy, A., Springenberg, J.T., Riedmiller, M., Brox, T.: Discriminative un- supervised feature learning with convolutional neural networks. In: NIPS (2014)</code>] in the scope of unsupervised feature learning.</li><li><a href="https://www.jianshu.com/p/0acd30a23e4e" target="_blank" rel="noopener">深度学习优化器总结</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，&lt;a href=&quot;http://www.arxiv.org/pdf/1505.04597.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://Xpangz.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="论文分析" scheme="http://Xpangz.github.io/tags/%E8%AE%BA%E6%96%87%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CNN 手写识别代码笔记</title>
    <link href="http://Xpangz.github.io/2019/10/25/CNN%20%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%AC%94%E8%AE%B0/"/>
    <id>http://Xpangz.github.io/2019/10/25/CNN 手写识别笔记/</id>
    <published>2019-10-25T08:00:00.000Z</published>
    <updated>2019-10-30T08:15:48.085Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20181123193922202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM5ODY1OA==,size_16,color_FFFFFF,t_70" alt="CNN过程"></p><p><a href="https://www.cnblogs.com/wj-1314/p/9754072.html" target="_blank" rel="noopener">深入学习卷积神经网络（CNN）的原理知识</a></p><a id="more"></a><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析:"></a>代码分析:</h3><h4 id="数据导入："><a href="#数据导入：" class="headerlink" title="数据导入："></a>数据导入：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>input_data</code>该函数专门用于下载mnist数据，我们直接调用就可以了，该函数执行完成后，会在当前目录下新建一个文件夹MNIST_data,下载的数据将放入这个文件夹内。</p><h4 id="定义函数（变成变量、先定义好卷积层和池化层的大小步长）"><a href="#定义函数（变成变量、先定义好卷积层和池化层的大小步长）" class="headerlink" title="定义函数（变成变量、先定义好卷积层和池化层的大小步长）"></a>定义函数（变成变量、先定义好卷积层和池化层的大小步长）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.Variable(tf.truncated_normal(shape,stddev=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_vairable</span><span class="params">(shape)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.Variable(tf.constant(<span class="number">0.1</span>, shape=shape))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x,W)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.nn.conv2d(x,W,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.nn.max_pool(x,ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padd</span><br></pre></td></tr></table></figure><p>要用<code>tf.Variable</code>定义，它才能成为变量</p><p> <code>tf.truncated_normal(shape, mean, stddev) :</code>shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。它是从截断的正态分布中输出随机值，虽然同样是输出正态分布，但是它生成的值是在距离均值两个标准差范围之内的，也就是说，在tf.truncated_normal中如果x的取值在区间（μ-2σ，μ+2σ）之外则重新进行选择。这样保证了生成的值都在均值附近。 </p><p><code>tf.constant(value,dtype=None,shape=None,name=&#39;Const&#39;,verify_shape=False)</code>创建一个常量tensor,按照value来赋值，value可以是个数或list，为一个数时，那么该常量中的所有值都用该数来赋值， 而当是一个列表时，注意列表的长度必须小于等于第三个参数shape的大小（即各维大小的乘积） ， 如果列表大小小于shape大小，则会用列表的最后一项元素填充剩余的张量元素。第五项如果修改为True的话表示检查value的形状与shape是否相符，如果不符会报错。 </p><p><code>tf.nn.xx</code>请参看<a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-1bon2zgb.html" target="_blank" rel="noopener">W3Cschool</a></p><p><code>tf.Variable</code> 一定要定义成变量它才是变量</p><h4 id="定义批次大小、要用到变量定义占位符、和修改图像形状"><a href="#定义批次大小、要用到变量定义占位符、和修改图像形状" class="headerlink" title="定义批次大小、要用到变量定义占位符、和修改图像形状"></a>定义批次大小、要用到变量定义占位符、和修改图像形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">100</span> <span class="comment"># 数据处理，批次大小</span></span><br><span class="line">n_batch = mnist.train.num_examples // batch_size <span class="comment"># 批次数量</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">x_image = tf.reshape(x,[<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><code>placeholder(dtype, shape=None, name=None)</code> </p><p><strong>dtype</strong>：数据类型。常用的是tf.float32,tf.float64等数值类型<br><strong>shape</strong>：数据形状。默认是None，就是一维值，也可以是多维，比如[None, 3]表示列是3，行不定 。规定输入结构。<br><strong>name</strong>：名称。<br>特点： 先类似于变量占个位置，之后sess.run()时需要从外界传入值来代替它，如果用这个的话就意味着在<code>sess.run</code>时输入一个值</p><p><code>tf.reshape(tensor,shape, name=None)</code> 将tensor 变换为参数shape的形式，-1代表无需自己指定，函数会自动计算</p><h4 id="第一层卷积和池化"><a href="#第一层卷积和池化" class="headerlink" title="第一层卷积和池化"></a>第一层卷积和池化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">32</span>]) <span class="comment"># 5x5的采样窗口，32个卷积核从1个平面抽取特征</span></span><br><span class="line">b_conv1 = bias_vairable([<span class="number">32</span>]) <span class="comment">#每个卷积核一个偏置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#28x28x1 的图片卷积之后变为28x28x32</span></span><br><span class="line"></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)  <span class="comment"># relu(x) = max(x,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#池化之后变为 14x14x32</span></span><br><span class="line"></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br></pre></td></tr></table></figure><p>定义了卷积核，核上的权重是随机的。bias 它其实就是函数的截距，与线性方程 y=wx+b 中的 b 的意义是一致的 ，不设置分类就经过原点，受到了限制。</p><p>卷积公式类似于：激活函数(W*x+b),只不过里面的乘法使用的是卷积运算。这种运算的具体细节被tensorflow隐藏了。同理池化也一样。</p><h4 id="第二层卷积池化"><a href="#第二层卷积池化" class="headerlink" title="第二层卷积池化"></a>第二层卷积池化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第二次卷积之后变为 14*14*64</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_vairable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2) + b_conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二次池化之后变为 7x7x64</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br></pre></td></tr></table></figure><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个全连接层</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>,<span class="number">1024</span>])  <span class="comment">#此处的7764是7x7x64，*被隐藏了</span></span><br><span class="line">b_fc1 = bias_vairable([<span class="number">1024</span>])</span><br><span class="line"><span class="comment">#7x7x64的图像变成1维向量</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2,[<span class="number">-1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br></pre></td></tr></table></figure><p>这里将第二次池化后的图像扁平化(一维化)了,把7x7x64变成了1024个全连接神经元。</p><blockquote><p> <code>tf.nn.dropout(X,keep_prob)</code>主要含两个变量，输入张量X和 概率值keep_prob(也是要以张量输入),float类型，每个元素被保留下来的概率。 是为了防止过拟合而随机抑制神经元 ，一般用在全连接层。</p></blockquote><p>Dropout就是在不同的训练过程中随机扔掉一部分神经元。也就是让某个神经元的激活值以一定的概率p，让其停止工作，这次训练过程中不更新权值，也不参加神经网络的计算。但是它的权重得保留下来（只是暂时不更新而已），下次样本输入时它可能又得工作了。<img src="https://upload-images.jianshu.io/upload_images/5631876-29d8c7849b67c77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt></p><h4 id="第二个全连接层"><a href="#第二个全连接层" class="headerlink" title="第二个全连接层"></a>第二个全连接层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>,<span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_vairable([<span class="number">10</span>])</span><br><span class="line">logits = tf.matmul(h_fc1_drop,W_fc2) + b_fc2</span><br><span class="line">prediction = tf.nn.sigmoid(logits)</span><br></pre></td></tr></table></figure><p>最后预测用的激活函数是sigmoid函数<img src=" https://upload-images.jianshu.io/upload_images/11959071-a6a9b86c29fe75bb.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt="函数形式" style="zoom:50%;">，图像为<img src="https://upload-images.jianshu.io/upload_images/11959071-ed4c65e5b5fa8300.png" alt></p><h4 id="训练和计算精度"><a href="#训练和计算精度" class="headerlink" title="训练和计算精度"></a>训练和计算精度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=logits))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="comment"># 采用Adam优化算法</span></span><br><span class="line"></span><br><span class="line">prediction_2 = tf.nn.softmax(prediction)</span><br><span class="line">correct_prediction = (tf.equal(tf.argmax(prediction_2,<span class="number">1</span>), tf.argmax(y,<span class="number">1</span>)))   <span class="comment"># 得到bool型变量，axis=1的时候，将每一行最大元素所在的索引记录下来，最后返回每一行最大元素所在的索引数组。</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32)) <span class="comment">#tf.cast将bool型变量变成数，</span></span><br></pre></td></tr></table></figure><p><code>tf.nn.softmax_cross_entropy_with_logits(logits, labels, name=None)</code><br>第一个参数logits：就是神经网络最后一层的输出，如果有batch的话，它的大小就是[batchsize，num_classes]，单样本的话，大小就是num_classes<br>第二个参数labels：实际的标签，大小同上。<br>第一步是先对网络最后一层的输出做一个softmax，这一步通常是求取输出属于某一类的概率<br>$$<br>softmax(x)<em>i = \dfrac{exp(x_i)}{\sum</em>{j}exp(x_j)}<br>$$<br> 第二步是softmax的输出向量[Y1，Y2,Y3…]和样本的实际标签做一个交叉熵，公式如下：<br>$$<br>H_{y’}(y) = -\sum_iy’{_i}\log(y_i)<br>$$<br>其 <img src="https://img-blog.csdn.net/20161128204121097" alt="img">  指代实际的标签中第i个的值(用mnist数据举例，如果是3，那么标签是[0，0，0，1，0，0，0，0，0，0]，除了第4个值为1，其他全为0）<img src="https://img-blog.csdn.net/20161128204500600" alt="img">就是softmax的输出向量[Y1，Y2,Y3…]中，第i个元素的值<br>显而易见，预测<img src="https://img-blog.csdn.net/20161128204500600" alt="img">越准确，结果的值越小（别忘了前面还有负号），最后求一个平均，得到我们想要的loss。 <strong>注意！！！这个函数的返回值并不是一个数，而是一个向量，如果要求交叉熵，我们要再做一步<code>tf.reduce_sum</code>操作,就是对向量里面所有元素求和，最后才得到<img src="https://img-blog.csdn.net/20161128213206933" alt="img">，如果求loss，则要做一步<code>tf.reduce_mean</code>操作，对向量求均值！</strong></p><p> <code>tf.argmax(input,axis)</code> 根据axis取值的不同返回每行或者每列最大值的索引。  axis=0时比较每一列的元素，将每一列最大元素所在的索引记录下来，最后输出每一列最大元素所在的索引数组 ,axis=1时，就是比较每一行的元素。</p><p><code>tf.equal</code>是比较两个元素是否相当，相等为1，否则为0。</p><h4 id="最后运行："><a href="#最后运行：" class="headerlink" title="最后运行："></a>最后运行：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(train_step, feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:<span class="number">0.7</span>&#125;)</span><br><span class="line">        acc = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y:mnist.test.labels, keep_prob:<span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">"Iter: "</span> + str(epoch) + <span class="string">", acc: "</span> + str(acc))</span><br></pre></td></tr></table></figure><p><code>tf.Session()</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.Session.run(xx) 执行这个结构xx</span><br><span class="line"><span class="comment"># 如果使用下述结构，自动带sess.close.</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    ......sess.run()......</span><br></pre></td></tr></table></figure><p>定义了变量后一定要用的最重要一步：<code>tf.initialize_all_variables()</code>  ，要初始化所有的变量，才会在tensorflow中激活，用<code>tf.sess.run()</code></p><p>因为有<code>tf.placeholder</code>，所以<code>sess.run()</code>中要多添加一项，即给出输入的值，<br>用feed_dict={}传入，类似字典，有名称和值。</p><p>为什么要用激励函数？<br>引入非线性，可以自己创建激励函数，但前提是要保证它是可微分的(反向传播时用)。少量神经层中，可以尝试各种激励函数，卷积层中推荐使用RELU激励函数，循环神经网络中推荐RELU,tanh。</p><p>疑问？ 边缘效应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">n_batch = mnist.train.num_examples // batch_size</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(tf.truncated_normal(shape,stddev=<span class="number">0.1</span>))  <span class="comment"># 它是从截断的正态分布中输出随机值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_vairable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(tf.constant(<span class="number">0.1</span>, shape=shape))  <span class="comment"># 创建一个常量tensor,按照value来赋值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x,W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x,W,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x,ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">x_image = tf.reshape(x,[<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">32</span>]) <span class="comment"># 5*5的采样窗口，32个卷积核从1个平面抽取特征</span></span><br><span class="line">b_conv1 = bias_vairable([<span class="number">32</span>]) <span class="comment">#每个卷积核一个偏置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 28*28*1 的图片卷积之后变为28*28*32</span></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)  <span class="comment"># relu(x) = max(x,0)</span></span><br><span class="line"><span class="comment"># 池化之后变为 14*14*32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次卷积之后变为 14*14*64</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_vairable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2) + b_conv2)</span><br><span class="line"><span class="comment"># 第二次池化之后变为 7*7*64</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个全连接层</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>,<span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_vairable([<span class="number">1024</span>])</span><br><span class="line"><span class="comment"># 7*7*64的图像变成1维向量</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2,[<span class="number">-1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个全连接层</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>,<span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_vairable([<span class="number">10</span>])</span><br><span class="line">logits = tf.matmul(h_fc1_drop,W_fc2) + b_fc2</span><br><span class="line">prediction = tf.nn.sigmoid(logits)</span><br><span class="line"></span><br><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=logits))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">prediction_2 = tf.nn.softmax(prediction)</span><br><span class="line">correct_prediction = (tf.equal(tf.argmax(prediction_2,<span class="number">1</span>), tf.argmax(y,<span class="number">1</span>)))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(train_step, feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:<span class="number">0.7</span>&#125;)</span><br><span class="line">        acc = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y:mnist.test.labels, keep_prob:<span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">"Iter: "</span> + str(epoch) + <span class="string">", acc: "</span> + str(acc))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181123193922202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM5ODY1OA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;CNN过程&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/9754072.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入学习卷积神经网络（CNN）的原理知识&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://Xpangz.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="代码分析" scheme="http://Xpangz.github.io/tags/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Markdown初学者入门指南</title>
    <link href="http://Xpangz.github.io/2019/10/17/Markdown%E5%88%9D%E5%AD%A6%E8%80%85%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://Xpangz.github.io/2019/10/17/Markdown初学者入门指南/</id>
    <published>2019-10-17T03:08:14.000Z</published>
    <updated>2019-10-17T04:13:49.070Z</updated>
    
    <content type="html"><![CDATA[<p>照搬<a href="https://blog.csdn.net/u014061630/article/details/81359144" target="_blank" rel="noopener">Markdown语法图文全面详解(10分钟学会)</a>，用作备份。</p><p><a href="https://www.sohu.com/a/316764909_115785" target="_blank" rel="noopener">更详细教程</a> </p> <a id="more"></a><p><strong>前言</strong><br>写过博客或者github上面的文档的，应该知道Markdown语法的重要性，不知道的朋友们也别着急，一篇博客轻松搞定Markdown语法。话说这个语法超级简单，一看就会，不信你点进来看看。</p><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h2><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>Ctrl + B</td></tr><tr><td>斜体</td><td>Ctrl + I</td></tr><tr><td>引用</td><td>Ctrl + Q</td></tr><tr><td>插入链接</td><td>Ctrl + L</td></tr><tr><td>插入代码</td><td>Ctrl + K</td></tr><tr><td>插入图片</td><td>Ctrl + G</td></tr><tr><td>提升标题</td><td>Ctrl + H</td></tr><tr><td>有序列表</td><td>Ctrl + O</td></tr><tr><td>无序列表</td><td>Ctrl + U</td></tr><tr><td>横线</td><td>Ctrl + R</td></tr><tr><td>撤销</td><td>Ctrl + Z</td></tr><tr><td>重做</td><td>Ctrl + Y</td></tr></tbody></table><h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h2><h3 id="2-1-字体设置斜体、粗体、删除线"><a href="#2-1-字体设置斜体、粗体、删除线" class="headerlink" title="2.1 字体设置斜体、粗体、删除线"></a>2.1 字体设置斜体、粗体、删除线</h3><p><em>这里是文字</em><br><em>这里是文字</em><br><strong>这里是文字</strong><br><strong><em>这里是文字</em></strong><br><del>这里是文字</del></p><p><img src="https://img-blog.csdn.net/20180802154402427?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-2-分级标题"><a href="#2-2-分级标题" class="headerlink" title="2.2 分级标题"></a>2.2 分级标题</h3><p><strong>写法1：</strong></p><p># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题  这个写法和 <strong>文字</strong>效果是一样的</p><p><img src="https://img-blog.csdn.net/2018080215454373?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><strong>写法2：</strong> </p><h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><p>或者</p><p>二级标题<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - </p><p><img src="https://img-blog.csdn.net/20180802154915835?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-3-链接"><a href="#2-3-链接" class="headerlink" title="2.3 链接"></a>2.3 链接</h3><p>（1）插入本地图片链接<br>语法规则，有两种写法：<br><img src="https://img-blog.csdn.net/20180802155057285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>注意：这个图片描述可以不写。</p><p>示例图如下：<br><img src="https://img-blog.csdn.net/20180802155239626?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（2）插入互联网上图片<br>语法规则：<br><img src="https://img-blog.csdn.net/20180802155336302?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>注意：这个图片描述可以不写。</p><p>示例如下：<br><img src="https://img-blog.csdn.net/20180802155413115?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>（3）自动连接<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的<br>例如：<br><img src="https://img-blog.csdn.net/20180802155459346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-4-分割线"><a href="#2-4-分割线" class="headerlink" title="2.4 分割线"></a>2.4 分割线</h3><p>你可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。<br><img src="https://img-blog.csdn.net/20180802155556110?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-5-代码块"><a href="#2-5-代码块" class="headerlink" title="2.5 代码块"></a>2.5 代码块</h3><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(tab), 另一种是利用英文“`”符号（一般在ESC键下方，和~同一个键）包裹代码。</p><p>（1）代码块：缩进 4 个空格或是 1 个制表符。效果如下：<br><img src="https://img-blog.csdn.net/20180802155701855?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>（2）行内式：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键）<br><img src="https://img-blog.csdn.net/20180802155907712?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（3）多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹，就可以了。<br>示例如下：<br><img src="https://img-blog.csdn.net/20180802160015673?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（4）代码块里面包含html代码<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理。</p><p><strong>注意：简书代码块里不支持html。</strong></p><p>示例如下：<br><img src="https://img-blog.csdn.net/20180802160155483?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-6-引用"><a href="#2-6-引用" class="headerlink" title="2.6 引用"></a>2.6 引用</h3><p>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</p><p>（1）基本使用<br>使用如下图所示：<br><img src="https://img-blog.csdn.net/20180802160324418?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（2）引用的嵌套使用<br>使用如图所示：<br><img src="https://img-blog.csdn.net/20180802160343802?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>（3）引用其它要素<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。<br>使用如图所示：<br><img src="https://img-blog.csdn.net/20180802160421785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-7-列表"><a href="#2-7-列表" class="headerlink" title="2.7 列表"></a>2.7 列表</h3><p>（1）无序列表<br>使用 *，+，- 表示无序列表。<br>注意：符号后面一定要有一个空格，起到缩进的作用。<br><img src="https://img-blog.csdn.net/2018080216053733?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（2）有序列表<br>使用数字和一个英文句点表示有序列表。<br>注意：英文句点后面一定要有一个空格，起到缩进的作用。<br><img src="https://img-blog.csdn.net/2018080216061165?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（3）无序列表和有序列表同时使用<br><img src="https://img-blog.csdn.net/20180802160735370?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（4）列表和其它要素混合使用<br>列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。</p><p><strong>注意事项：</strong></p><blockquote><p>（1）加粗效果不能直接用于列表标题里面，但是可以嵌套在列表里面混合使用。<br>（2）列表中包含代码块（前面加2个tab或者8个空格，并且需要空一行，否则不显示）。<br>.<br>使用示例如下图：<br><img src="https://img-blog.csdn.net/20180802160851570?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></blockquote><p>（5）注意事项<br>在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。如下图所示：<br><img src="https://img-blog.csdn.net/20180802161039348?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h3><p>表格的基本写法很简单，就跟表格的形状很相似：<br><img src="https://img-blog.csdn.net/20180802161209660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><p>如下图所示：<br><img src="https://img-blog.csdn.net/20180802161235917?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="3-常用技巧"><a href="#3-常用技巧" class="headerlink" title="3. 常用技巧"></a>3. 常用技巧</h2><h3 id="3-1-换行"><a href="#3-1-换行" class="headerlink" title="3.1 换行"></a>3.1 换行</h3><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：</p><h3 id="3-2-缩进字符"><a href="#3-2-缩进字符" class="headerlink" title="3.2 缩进字符"></a>3.2 缩进字符</h3><p>不断行的空白格  或  半角的空格   或  全角的空格   或  <br><img src="https://img-blog.csdn.net/20180802162415963?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="3-3-特殊符号"><a href="#3-3-特殊符号" class="headerlink" title="3.3 特殊符号"></a>3.3 特殊符号</h3><p>（1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><p>示例如下：<br><img src="https://img-blog.csdn.net/20180802162507298?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>（2）其他特殊字符，示例如下：<br><img src="https://img-blog.csdn.net/20180802162542616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>想知道字符对应的Unicode码，可以看这个网站：<a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">https://unicode-table.com/cn/</a></p><p><strong>附上几个工具对特殊字符的支持的对比图:</strong><br><img src="https://img-blog.csdn.net/20180802162726962?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="3-4-字体、字号与颜色"><a href="#3-4-字体、字号与颜色" class="headerlink" title="3.4 字体、字号与颜色"></a>3.4 字体、字号与颜色</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。但是它本身是不支持修改字体、字号与颜色等功能的！</p><p>CSDN-markdown编辑器是其衍生版本，扩展了Markdown的功能（如表格、脚注、内嵌HTML等等）！对，就是内嵌HTML，接下来要讲的功能就需要使用内嵌HTML的方法来实现。</p><p>字体，字号和颜色编辑如下代码<br><img src="https://img-blog.csdn.net/20180802162832307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>具体颜色分类及标记请看下表：<br><img src="https://img-blog.csdn.net/20180802162907453?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70https://img-blog.csdn.net/20180802162907453?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="3-5-链接的高级操作"><a href="#3-5-链接的高级操作" class="headerlink" title="3.5 链接的高级操作"></a>3.5 链接的高级操作</h3><p>链接的高级操作（这个需要掌握一下，很有用）</p><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><p>这个在上文第二条基本语法的 链接这个小节已经过，这里就不继续讲解了。</p><h4 id="2-参考式链接"><a href="#2-参考式链接" class="headerlink" title="2.参考式链接"></a>2.参考式链接</h4><p>在文档要插入图片的地方写![图片或网址链接][标记]，在文档的最后写上[标记]:图片地址 “标题”。（最后这个”标题”可以不填写）</p><p>示例如下：<br><img src="https://img-blog.csdn.net/2018080216303854?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="3-内容目录"><a href="#3-内容目录" class="headerlink" title="3.内容目录"></a>3.内容目录</h4><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p><h4 id="4-锚点"><a href="#4-锚点" class="headerlink" title="4.锚点"></a>4.锚点</h4><p>锚点其实就是页内超链接。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。在目录中点击这一节，就能跳过来。</p><p><strong>注意：</strong> 在简书中使用锚点时，点击会打开一个新的当前页面，虽然锚点用的不是很舒服，但是可以用注脚实现这个功能。</p><p><strong>语法说明：</strong> 在你准备跳转到指定标题后插入锚点{ #锚点 }，然后在文档的其它地方写上连接到锚点的链接。</p><p>使用如下图所示：<br><img src="https://img-blog.csdn.net/20180802163343495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="5-注脚"><a href="#5-注脚" class="headerlink" title="5.注脚"></a>5.注脚</h4><p><strong>语法说明：</strong><br>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>示例如下：<br><img src="https://img-blog.csdn.net/20180802163447739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>注：</p><blockquote><ol><li>脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。</li><li>由于简书不支持锚点，所以可以用注脚实现页面内部的跳转。</li></ol></blockquote><h3 id="3-6-背景色"><a href="#3-6-背景色" class="headerlink" title="3.6 背景色"></a>3.6 背景色</h3><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。举例如下：</p><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><p><img src="https://img-blog.csdn.net/20180802164159599?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="3-7-emoji表情符号"><a href="#3-7-emoji表情符号" class="headerlink" title="3.7 emoji表情符号"></a>3.7 emoji表情符号</h3><p>emoji表情使用:EMOJICODE:的格式，详细列表可见<br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p><p>当然现在很多markdown工具或者网站都不支持。</p><p>下面列出几个平台的对比：</p><table><thead><tr><th>工具或网站</th><th>是否支持emoji表情符号</th></tr></thead><tbody><tr><td>简书</td><td>否</td></tr><tr><td>MarkDownPad</td><td>否（不知道付费版是否支持）</td></tr><tr><td>有道云笔记</td><td>否</td></tr><tr><td>zybuluo.com</td><td>否</td></tr><tr><td>github</td><td>是</td></tr></tbody></table><p><img src="https://img-blog.csdn.net/20180802164508437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="4-高端用法"><a href="#4-高端用法" class="headerlink" title="4. 高端用法"></a>4. 高端用法</h2><h3 id="4-1-Latex数学公式"><a href="#4-1-Latex数学公式" class="headerlink" title="4.1 Latex数学公式"></a>4.1 Latex数学公式</h3><p><strong>使用LaTex数学公式</strong></p><p>1.行内公式：使用两个”$”符号引用公式:</p><p>$公式$</p><p>2.行间公式：使用两对“$$”符号引用公式：</p><p>$$公式$$</p><p>输入$\sqrt{x^{2}}$<br>显示结果是x2−−√x2</p><p>具体可以参考 markdown编辑器使用LaTex数学公式（<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Ftestcs_dn%2Farticle%2Fdetails%2F44229085）" target="_blank" rel="noopener">https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Ftestcs_dn%2Farticle%2Fdetails%2F44229085）</a></p><p>latex数学符号详见：<a href="https://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">常用数学符号的 LaTeX 表示方法</a></p><h3 id="4-2-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2 流程图"></a>4.2 流程图</h3><p>这里简单介绍一下流程图的语法，仅作为了解，如下图所示：<br><img src="https://img-blog.csdn.net/20180802165820199?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="4-3-制作一份待办事宜—-Todo-列表"><a href="#4-3-制作一份待办事宜—-Todo-列表" class="headerlink" title="4.3 制作一份待办事宜—-Todo 列表"></a>4.3 制作一份待办事宜—-Todo 列表</h3><p><img src="https://img-blog.csdn.net/20180802165859799?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="4-4-绘制-序列图"><a href="#4-4-绘制-序列图" class="headerlink" title="4.4 绘制 序列图"></a>4.4 绘制 序列图</h3><p><img src="https://img-blog.csdn.net/2018080216592352?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="4-5-绘制-甘特图"><a href="#4-5-绘制-甘特图" class="headerlink" title="4.5 绘制 甘特图"></a>4.5 绘制 甘特图</h3><p><img src="https://img-blog.csdn.net/20180802165941601?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="5-Markdown工具"><a href="#5-Markdown工具" class="headerlink" title="5. Markdown工具"></a>5. Markdown工具</h2><p>1.markdownpad软件，就是利用markdown语言写笔记的。官网下载地址：<a href="http://markdownpad.com/" target="_blank" rel="noopener">http://markdownpad.com/</a></p><p>软件安装之后的示意图如下图所示：<br><img src="https://img-blog.csdn.net/20180802170021581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>2.有道云笔记支持markdownpad语法。官方网址：<a href="http://note.youdao.com/" target="_blank" rel="noopener">http://note.youdao.com/</a> 它有在线网页版以及PC端可以下载。当然有道云笔记也支持html语法。</p><p>网页版使用markdown示例图如下：<br><img src="https://img-blog.csdn.net/20180802170102176?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>3.在线编辑markdown <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">https://www.zybuluo.com/mdeditor</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照搬&lt;a href=&quot;https://blog.csdn.net/u014061630/article/details/81359144&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown语法图文全面详解(10分钟学会)&lt;/a&gt;，用作备份。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sohu.com/a/316764909_115785&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更详细教程&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="入门指南" scheme="http://Xpangz.github.io/tags/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebooks入门指南</title>
    <link href="http://Xpangz.github.io/2019/10/16/Jupyter%20Notebooks%E5%88%9D%E5%AD%A6%E8%80%85%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://Xpangz.github.io/2019/10/16/Jupyter Notebooks初学者入门指南/</id>
    <published>2019-10-16T08:47:10.000Z</published>
    <updated>2019-10-17T02:42:52.483Z</updated>
    
    <content type="html"><![CDATA[<p>首先奉上链接<a href="http://baijiahao.baidu.com/s?id=1601883438842526311&wfr=spider&for=pc" target="_blank" rel="noopener">入门｜始于Jupyter Notebooks：一份全面的初学者实用指南</a>，<a href="https://blog.csdn.net/FuJiaYou597/article/details/88383368" target="_blank" rel="noopener">Jupyter notebook学习笔记</a>，自己仅对这些文章进行了些提炼。</p> <a id="more"></a> <h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>​        打开anaconda文件夹中的jupyter，命令窗口会自动生成网络地址，将其复制粘贴到浏览器中即可。</p><p>​        打开笔记本后，会看到顶部 有三个选项卡：Files、Running 和 Clusters。其中，Files 基本上就是列出所有文件，Running 是展示你当前打开的终端和笔记本，Clusters 是由 IPython 并行提供的 。</p><p>​         要打开一个新的 Jupyter 笔记本，点击页面右侧的「New」选项。你在这里会看到 4 个需要选择的选项：</p><ul><li><p>Python 3</p></li><li><p>Text File （ 选择 Text File，你会得到一个空面板。你可以添加任何字母、单词和数字。其基本上可以看作是一个文本编辑器（类似于 Ubuntu 的文本编辑器）。你可以在其中选择语言（有很多语言选项），所以你可以在这里编写脚本。你也可以查找和替换该文件中的词。 ）</p></li><li><p>Folder （ 选择 Folder 选项时，你会创建一个新的文件夹，你可以在其中放入文件，重命名或删除它。各种操作都可以。 ）</p></li><li><p>Terminal （ Terminal 完全类似于在 Mac 或 Linux 机器上的终端（或 Windows 上的 cmd）。其能在你的网络浏览器内执行一些支持终端会话的工作。在这个终端输入 python，你就可以开始写你的 Python 脚本了！ ）</p><p>在New选项中选择Python3，会出现下面的屏幕(图片使用相对路径：/images/xxx.png)</p></li></ul><p><img src="/images/1571136711352.png" alt="1界面图"></p><p>在蓝色框上面的带图标的菜单选项为： 保存并检查、插入代码块、剪切、复制、粘贴、向上和向下移动单元、运行单元内的代码、停止代码以及重启 kernel 。</p><p>上图的代码处，下拉框有4个选项，分别使单元有不同功能：</p><ul><li>代码， 写代码的地方。 </li><li>标记，  这是写文本的地方。你可以在运行一段代码后添加你的结论、添加注释等。 </li><li>原生 NBConvert，  这是一个可将你的笔记本转换成另一种格式（比如 HTML）的命令行工具。 </li><li>标题，  这是你添加标题的地方，这样你可以将不同的章节分开，让你的笔记本看起来更整齐更清晰。这个现在已经被转换成 Markdown 选项本身了。输入一个「##」之后，后面输入的内容就会被视为一个标题。 </li></ul><h3 id="Magic-Function"><a href="#Magic-Function" class="headerlink" title="Magic Function"></a>Magic Function</h3><p> 开发人员已经插入了预定义的 magic functions，使你的工作更方便和更具交互性。你可以运行以下命令来查看这些函数的列表(注意：通常不需要输入“％”，因为通常 Automagic 是默认打开的）： </p><blockquote><p> %lsmagic </p></blockquote><p>magic command有两种运行方式：</p><ul><li><p>逐行运行(Line-wise)</p></li><li><p>逐块运行(Cell-wise)</p><p>Line-wise 是当你想要执行一个单行命令的时候使用，而 Cell-wise 是你想要执行的命令不仅仅是一行，而是整个单元格中的整个代码块时使用。</p><p>在逐行运行模式中，所有给定的命令都必须以 ％ 字符开始，而在逐块运行模式下，所有命令都必须以 %% 开头。 </p></li></ul><h3 id="交互式仪表盘"><a href="#交互式仪表盘" class="headerlink" title="交互式仪表盘"></a>交互式仪表盘</h3><p> 在你考虑添加小部件之前，你需要导入 widgets 软件包：</p><blockquote><p>from ipywidgets import widgets</p></blockquote><p> 小部件的基本类型有典型的文本输入小部件、基于输入的小部件和按钮小部件。  关于小部件的完整指南，请参阅：<a href="https://blog.dominodatalab.com/interactive-dashboards-in-jupyter/" target="_blank" rel="noopener">https://blog.dominodatalab.com/interactive-dashboards-in-jupyter/</a> </p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p> Jupyter Notebooks 提供了两种不同的键盘输入模式——命令和编辑。命令模式是将键盘和笔记本层面的命令绑定起来，并且由带有蓝色左边距的灰色单元边框表示。编辑模式让你可以在活动单元中输入文本（或代码），用绿色单元边框表示。 </p><p> 进入命令模式之后（此时你没有活跃单元），你可以尝试以下快捷键： </p><table><thead><tr><th>命令模式 (按键 Esc 开启)</th><th>说明</th></tr></thead><tbody><tr><td>Enter</td><td>转入编辑模式</td></tr><tr><td>Shift-Enter</td><td>运行本单元，选中下个单元</td></tr><tr><td>Ctrl-Enter</td><td>运行本单元</td></tr><tr><td>Alt-Enter</td><td>运行本单元在其下插入新单元</td></tr><tr><td>Y</td><td>单元转入代码状态</td></tr><tr><td>M</td><td>单元转入markdown状态</td></tr><tr><td>R</td><td>单元转入raw状态</td></tr><tr><td>1</td><td>设定 1 级标题</td></tr><tr><td>2</td><td>设定 2 级标题</td></tr><tr><td>3</td><td>设定 3 级标题</td></tr><tr><td>4</td><td>设定 4 级标题</td></tr><tr><td>5</td><td>设定 5 级标题</td></tr><tr><td>6</td><td>设定 6 级标题</td></tr><tr><td>Up</td><td>选中上方单元</td></tr><tr><td>K</td><td>选中上方单元</td></tr><tr><td>Down</td><td>选中下方单元</td></tr><tr><td>J</td><td>选中下方单元</td></tr><tr><td>Shift-K</td><td>扩大选中上方单元</td></tr><tr><td>Shift-J</td><td>扩大选中下方单元</td></tr><tr><td>A</td><td>在上方插入新单元</td></tr><tr><td>B</td><td>在下方插入新单元</td></tr><tr><td>X</td><td>剪切选中的单元</td></tr><tr><td>C</td><td>复制选中的单元</td></tr><tr><td>Shift-V</td><td>粘贴到上方单元</td></tr><tr><td>V</td><td>粘贴到下方单元</td></tr><tr><td>Z</td><td>恢复删除的最后一个单元</td></tr><tr><td>D,D</td><td>删除选中的单元</td></tr><tr><td>Shift-M</td><td>合并选中的单元</td></tr><tr><td>Ctrl-S</td><td>文件存盘</td></tr><tr><td>S</td><td>文件存盘</td></tr><tr><td>L</td><td>转换行号</td></tr><tr><td>O</td><td>转换输出</td></tr><tr><td>Shift-O</td><td>转换输出滚    动</td></tr><tr><td>Esc</td><td>关闭页面</td></tr><tr><td>Q</td><td>关闭页面</td></tr><tr><td>H</td><td>显示快捷键帮助</td></tr><tr><td>I,I</td><td>中断Notebook内核</td></tr><tr><td>0,0</td><td>重启Notebook内核</td></tr><tr><td>Shift</td><td>忽略</td></tr><tr><td>Shift-Space</td><td>向上滚动</td></tr><tr><td>Space</td><td>向下滚动</td></tr><tr><td>Shift+↑或↓</td><td>可选择多个单元</td></tr><tr><td>F</td><td>会弹出「查找和替换」菜单</td></tr></tbody></table><p> 处于编辑模式时（在命令模式时按 Enter 会进入编辑模式），你会发现下列快捷键很有用： </p><table><thead><tr><th>编辑模式 ( Enter 键启动)</th><th>说明</th></tr></thead><tbody><tr><td>Tab</td><td>代码补全或缩进</td></tr><tr><td>Shift-Tab</td><td>提示</td></tr><tr><td>Ctrl-]</td><td>缩进</td></tr><tr><td>Ctrl-[</td><td>解除缩进</td></tr><tr><td>Ctrl-A</td><td>全选</td></tr><tr><td>Ctrl-Z</td><td>复原</td></tr><tr><td>Ctrl-Shift-Z</td><td>再做</td></tr><tr><td>Ctrl-Y</td><td>再做</td></tr><tr><td>Ctrl-Home</td><td>跳到单元开头</td></tr><tr><td>Ctrl-Up</td><td>跳到单元开头</td></tr><tr><td>Ctrl-End</td><td>跳到单元末尾</td></tr><tr><td>Ctrl-Down</td><td>跳到单元末尾</td></tr><tr><td>Ctrl-Left</td><td>跳到左边一个字首</td></tr><tr><td>Ctrl-Right</td><td>跳到右边一个字首</td></tr><tr><td>Ctrl-Backspace</td><td>删除前面一个字</td></tr><tr><td>Ctrl-Delete</td><td>删除后面一个字</td></tr><tr><td>Esc</td><td>进入命令模式</td></tr><tr><td>Ctrl-M</td><td>进入命令模式</td></tr><tr><td>Shift-Enter</td><td>运行本单元，选中下一单元</td></tr><tr><td>Ctrl-Enter</td><td>运行本单元</td></tr><tr><td>Alt-Enter</td><td>运行本单元，在下面插入一单元</td></tr><tr><td>Ctrl-Shift–</td><td>分割单元</td></tr><tr><td>Ctrl-Shift-Subtract</td><td>分割单元</td></tr><tr><td>Ctrl-S</td><td>文件存盘</td></tr><tr><td>Shift</td><td>忽略</td></tr><tr><td>Up</td><td>光标上移或转入上一单元</td></tr><tr><td>Down</td><td>光标下移或转入下一单元</td></tr><tr><td>Ctrl + Enter</td><td>会运行你的整个单元块</td></tr><tr><td>Ctrl + Shift + F</td><td>打开命令面板</td></tr></tbody></table><p> 要查看键盘快捷键完整列表，可在命令模式按「H」或进入「Help &gt; Keyboard Shortcuts」。你一定要经常看这些快捷键，因为常会添加新的。 </p><h3 id="Jupyter-Notebooks扩展"><a href="#Jupyter-Notebooks扩展" class="headerlink" title=" Jupyter Notebooks扩展"></a><font color="#0099ff" size="5" face="黑体"> Jupyter Notebooks扩展</font></h3><p>这个在安装Notebooks时似乎出错了</p><p><a href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">Installing jupyter_contrib_nbextensions</a></p><p>最后</p><p><strong>最佳实践</strong></p><p>尽管独自工作可能很有趣，但大多数时候你都是团队的一员。在这种情况下，遵循指导原则和最佳实践是很重要的，能确保你的代码和 Jupyter Notebooks 都有适当的注释，以便与你的团队成员保持一致。这里我列出了一些最佳实践指标，你在 Jupyter Notebooks 上工作时一定要遵守：</p><ul><li>对任何程序员而言都是最重要的事情之一——总是确保你为你的代码添加了适当的注释！</li><li>确保你的代码有所需的文档。</li><li>考虑一个命名方案并贯彻始终。这能让其他人更容易遵循。</li><li>不管你的代码需要什么库，都在你的笔记本起始处导入它们。（并在旁边添加注释说明你载入它们的目的）</li><li>确保你的代码有适当的行距。你不要将你的循环和函数放在同一行——否则如果后面要引用它们，会让人抓狂的！</li><li>有时候你的文件中有非常大量的代码。看看能不能将你认为不重要的某些代码隐藏起来，之后再引用。这能让你的笔记本看起来整洁清晰，这是非常可贵的。</li><li>查看这个在 matplotlib 上的笔记本，看看可以如何简练地进行呈现：<a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb" target="_blank" rel="noopener">http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb</a></li></ul><p>另外，还会有后续补充~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先奉上链接&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1601883438842526311&amp;wfr=spider&amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;入门｜始于Jupyter Notebooks：一份全面的初学者实用指南&lt;/a&gt;，&lt;a href=&quot;https://blog.csdn.net/FuJiaYou597/article/details/88383368&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jupyter notebook学习笔记&lt;/a&gt;，自己仅对这些文章进行了些提炼。&lt;/p&gt;
    
    </summary>
    
    
      <category term="入门指南" scheme="http://Xpangz.github.io/tags/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>postname</title>
    <link href="http://Xpangz.github.io/2019/10/09/postname/"/>
    <id>http://Xpangz.github.io/2019/10/09/postname/</id>
    <published>2019-10-09T08:50:19.000Z</published>
    <updated>2019-10-16T08:48:37.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初次写文章"><a href="#一、初次写文章" class="headerlink" title="一、初次写文章"></a>一、初次写文章</h2><p> 要学会用Markdown来写博客，自己的路还有很长要走</p><ul><li>什么是Markdown？</li></ul>]]></content>
    
    <summary type="html">
    
      文章模板，初次尝试
    
    </summary>
    
    
      <category term="Hexo" scheme="http://Xpangz.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
